{"version":3,"file":"chunk/9047.b345bd52.js","mappings":"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","sources":["webpack://@snx-v3/governance/../../node_modules/viem/_esm/errors/ccip.js","webpack://@snx-v3/governance/../../node_modules/viem/_esm/utils/ccip.js"],"sourcesContent":["import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nimport { getUrl } from './utils.js';\nexport class OffchainLookupError extends BaseError {\n    constructor({ callbackSelector, cause, data, extraData, sender, urls, }) {\n        super(cause.shortMessage ||\n            'An error occurred while fetching for an offchain result.', {\n            cause,\n            metaMessages: [\n                ...(cause.metaMessages || []),\n                cause.metaMessages?.length ? '' : [],\n                'Offchain Gateway Call:',\n                urls && [\n                    '  Gateway URL(s):',\n                    ...urls.map((url) => `    ${getUrl(url)}`),\n                ],\n                `  Sender: ${sender}`,\n                `  Data: ${data}`,\n                `  Callback selector: ${callbackSelector}`,\n                `  Extra data: ${extraData}`,\n            ].flat(),\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupError'\n        });\n    }\n}\nexport class OffchainLookupResponseMalformedError extends BaseError {\n    constructor({ result, url }) {\n        super('Offchain gateway response is malformed. Response data must be a hex value.', {\n            metaMessages: [\n                `Gateway URL: ${getUrl(url)}`,\n                `Response: ${stringify(result)}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupResponseMalformedError'\n        });\n    }\n}\nexport class OffchainLookupSenderMismatchError extends BaseError {\n    constructor({ sender, to }) {\n        super('Reverted sender address does not match target contract address (`to`).', {\n            metaMessages: [\n                `Contract address: ${to}`,\n                `OffchainLookup sender address: ${sender}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupSenderMismatchError'\n        });\n    }\n}\n//# sourceMappingURL=ccip.js.map","import { call } from '../actions/public/call.js';\nimport { OffchainLookupError, OffchainLookupResponseMalformedError, OffchainLookupSenderMismatchError, } from '../errors/ccip.js';\nimport { HttpRequestError } from '../errors/request.js';\nimport { decodeErrorResult } from './abi/decodeErrorResult.js';\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js';\nimport { isAddressEqual } from './address/isAddressEqual.js';\nimport { concat } from './data/concat.js';\nimport { isHex } from './data/isHex.js';\nimport { stringify } from './stringify.js';\nexport const offchainLookupSignature = '0x556f1830';\nexport const offchainLookupAbiItem = {\n    name: 'OffchainLookup',\n    type: 'error',\n    inputs: [\n        {\n            name: 'sender',\n            type: 'address',\n        },\n        {\n            name: 'urls',\n            type: 'string[]',\n        },\n        {\n            name: 'callData',\n            type: 'bytes',\n        },\n        {\n            name: 'callbackFunction',\n            type: 'bytes4',\n        },\n        {\n            name: 'extraData',\n            type: 'bytes',\n        },\n    ],\n};\nexport async function offchainLookup(client, { blockNumber, blockTag, data, to, }) {\n    const { args } = decodeErrorResult({\n        data,\n        abi: [offchainLookupAbiItem],\n    });\n    const [sender, urls, callData, callbackSelector, extraData] = args;\n    const { ccipRead } = client;\n    const ccipRequest_ = ccipRead && typeof ccipRead?.request === 'function'\n        ? ccipRead.request\n        : ccipRequest;\n    try {\n        if (!isAddressEqual(to, sender))\n            throw new OffchainLookupSenderMismatchError({ sender, to });\n        const result = await ccipRequest_({ data: callData, sender, urls });\n        const { data: data_ } = await call(client, {\n            blockNumber,\n            blockTag,\n            data: concat([\n                callbackSelector,\n                encodeAbiParameters([{ type: 'bytes' }, { type: 'bytes' }], [result, extraData]),\n            ]),\n            to,\n        });\n        return data_;\n    }\n    catch (err) {\n        throw new OffchainLookupError({\n            callbackSelector,\n            cause: err,\n            data,\n            extraData,\n            sender,\n            urls,\n        });\n    }\n}\nexport async function ccipRequest({ data, sender, urls, }) {\n    let error = new Error('An unknown error occurred.');\n    for (let i = 0; i < urls.length; i++) {\n        const url = urls[i];\n        const method = url.includes('{data}') ? 'GET' : 'POST';\n        const body = method === 'POST' ? { data, sender } : undefined;\n        try {\n            const response = await fetch(url.replace('{sender}', sender).replace('{data}', data), {\n                body: JSON.stringify(body),\n                method,\n            });\n            let result;\n            if (response.headers.get('Content-Type')?.startsWith('application/json')) {\n                result = (await response.json()).data;\n            }\n            else {\n                result = (await response.text());\n            }\n            if (!response.ok) {\n                error = new HttpRequestError({\n                    body,\n                    details: result?.error\n                        ? stringify(result.error)\n                        : response.statusText,\n                    headers: response.headers,\n                    status: response.status,\n                    url,\n                });\n                continue;\n            }\n            if (!isHex(result)) {\n                error = new OffchainLookupResponseMalformedError({\n                    result,\n                    url,\n                });\n                continue;\n            }\n            return result;\n        }\n        catch (err) {\n            error = new HttpRequestError({\n                body,\n                details: err.message,\n                url,\n            });\n        }\n    }\n    throw error;\n}\n//# sourceMappingURL=ccip.js.map"],"names":["OffchainLookupError","constructor","callbackSelector","cause","data","extraData","sender","urls","super","shortMessage","metaMessages","length","map","url","flat","Object","defineProperty","this","enumerable","configurable","writable","value","OffchainLookupResponseMalformedError","result","stringify","OffchainLookupSenderMismatchError","to","offchainLookupSignature","offchainLookupAbiItem","name","type","inputs","async","offchainLookup","client","blockNumber","blockTag","args","decodeErrorResult","abi","callData","ccipRead","ccipRequest_","request","ccipRequest","isAddressEqual","data_","call","concat","encodeAbiParameters","err","error","Error","i","method","includes","body","undefined","response","fetch","replace","JSON","headers","get","startsWith","json","text","ok","details","statusText","status","isHex","message"],"sourceRoot":""}